
{{- range $CronJob :=  .Values.cronJobs }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/name: {{ include "Common.name" $ }}--{{ $CronJob.name }}
    app.kubernetes.io/part-of: {{ include "Common.name" $ }}
    helm.sh/chart: {{ include "Common.chart" $ }}
    {{- range $Label, $Value := $.Values.labels }}
    {{ $Label }}: {{ $Value | quote  }}
    {{- end }}
  name: {{ include "Common.name" $ }}--{{ $CronJob.name }}
spec:
  successfulJobsHistoryLimit: {{ $.Values.cronJob.successfulJobsHistoryLimit }}
  schedule: "{{ $CronJob.schedule }}"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "Common.name" $ }}
        {{- range $Label, $Value := $.Values.labels }}
        {{ $Label }}: {{ $Value | quote  }}
        {{- end }}
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: {{ include "Common.name" $ }}
            {{- range $Label, $Value := $.Values.labels }}
            {{ $Label }}: {{ $Value | quote  }}
            {{- end }}
        spec:
          {{- if $.Values.cronJob.useNodeDns }}
          dnsPolicy: "ClusterFirst"
          {{- end }}
          {{- if $CronJob.nodeSelector }}
          nodeSelector:
          {{- range $key, $value :=  $CronJob.nodeSelector }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
          {{- end }}
          containers:
            - name: {{ include "Common.name" $ }}--{{ $CronJob.name }}
              image: "{{ $.Values.image.prefix }}{{ $.Values.image.separator }}{{ $.Values.cronJob.component }}:{{ $.Values.image.version }}"
              imagePullPolicy: {{ $.Values.imagePullPolicy }}
              {{- if $.Values.security.enabled }}
              securityContext:
                runAsNonRoot: {{ $.Values.security.runAsNonRoot }}
                runAsUser: {{ $.Values.security.user }}
                runAsGroup: {{ $.Values.security.user }}
              {{- end }}
              {{- if $.Values.cronJob.lifecycle }}
              lifecycle:
{{ toYaml $.Values.cronJob.lifecycle.hooks | indent 14 }}
              {{- end}}
              args:
{{- if $CronJob.args }}
{{ toYaml $CronJob.args | indent 16 }}
{{- end }}
              env:
                {{- range $key, $value :=  $.Values.envs }}
                - name: {{ $key }}
                  value: {{ $value | quote }}
                {{- end }}
              resources:
              {{- if $CronJob.resources }}
{{ toYaml $CronJob.resources | indent 16 }}
              {{- else }}
              {{- if $.Values.cronJob.resources.limits }}
                limits:
{{ toYaml $.Values.cronJob.resources.limits | indent 18 }}
              {{- end }}
              {{- if $.Values.cronJob.resources.requests }}
                requests:
{{ toYaml $.Values.cronJob.resources.requests | indent 18 }}
              {{- end }}
              {{- end }}
          {{- if or $.Values.secretEnvs $.Values.secretEnvsGlobal }}
              envFrom:
                {{- range $.Values.secretEnvsGlobal }}
                - secretRef:
                    name: {{ .name | default "secret" }}
                    optional: {{ .isOptional | default false }}
                {{- end }}
                {{- range $.Values.secretEnvs }}
                - secretRef:
                    name: {{ include "Common.name" $ }}--{{ .name | default "secret" }}
                    optional: {{ .isOptional | default false }}
                {{- end }}
          {{- end }}
          {{- if $.Values.imagePullSecrets }}
          imagePullSecrets:
            - name: {{ $.Values.imagePullSecrets }}
          {{- end }}

          ## InitContainers
          {{- if $.Values.cronJob.initContainers }}
          initContainers:
            {{- range $initContainer := $.Values.cronJob.initContainers}}
            - image: "{{ $.Values.image.prefix }}{{ $.Values.image.separator }}{{ $.Values.cronJob.component }}:{{ $.Values.image.version }}"
              name: {{ $initContainer.name }}
              command:
                - "sh"
                - "-c"
              args: {{ $initContainer.args }}
              env:
                {{- range $key, $value :=  $.Values.envs }}
                - name: {{ $key }}
                  value: {{ $value | quote }}
                {{- end }}

              {{- if or $.Values.secretEnvs $.Values.secretEnvsGlobal }}
              envFrom:
                {{- range $.Values.secretEnvsGlobal }}
                - secretRef:
                    name: {{ .name | default "secret" }}
                    optional: {{ .isOptional | default false }}
                {{- end }}
                {{- range $.Values.secretEnvs }}
                - secretRef:
                    name: {{ include "Common.name" $ }}--{{ .name | default "secret" }}
                    optional: {{ .isOptional | default false }}
            {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}

          restartPolicy: OnFailure
{{- end }}
